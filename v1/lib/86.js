export const __webpack_esm_id__=86;export const __webpack_esm_ids__=[86,343];export const __webpack_esm_modules__={343:(t,e,o)=>{o.d(e,{default:()=>r});const r={ERR0001:"Unable to find the raw code to be compiled",ERR0002:"'rawCode' not provided",ERR0003:'Make sure the code is wrapped in &lt;script type="text/texscript">...&lt;/script&gt;',ERR0004:"'codeLOC' not provided",ERR0005:"'rule' not provided",ERR0006:"'matches' not provided",ERR0007:"'tokens' not provided",ERR0008:"token.type is null",ERR0009:"'ast' is not provided",ERR0010:"'node' is not provided",ERR0011:"'lang' is not provided",ERR0012:"Code generator for mentioned language is not provided",ERR0013:"'metricsName' not provided",ERR0014:"Unable to find any code written in Texscript",ERR0015:"Not able to find any Texscript code inside &lt;script&gt; element",ERR0016:"&lt;script&gt; element not found",ERR0017:"Compilation failed",ERR0018:"Dependency not found",ERR0019:"Unable to find any Texscript source URL inside &lt;script&gt; element",ERR0020:'Texscript code should be provided inside &lt;script type="text/texscript">...&lt;/script&gt; or as URL using &lt;script src="file.txs" type="text/texscript">&lt;/script&gt;'}},705:(t,e,o)=>{o.d(e,{findCodeFromDOM:()=>i});var r=o(505),n=o(343);async function i(){try{const t=[],e=document.querySelectorAll('script[type="text/texscript"]');if(!e)throw new Error(n.default.ERR0003);if(e.length>1)for(const o of e){const e=await d(o);e&&t.push(e)}else{const o=await d(e[0]);o&&t.push(o)}if(!(t.length>0))throw new Error(n.default.ERR0014);return t.join("\n")}catch(t){(0,r.r)(t,"error"),console.log(t)}}async function d(t){if(!t)throw new Error(n.default.ERR0016);const e=t?t.innerText:null,o=t?t.getAttribute("src"):null;if(!e&&!o)throw new Error(n.default.ERR0020);let r=null,i=null;if(e&&(r=e.trim(),!r))throw new Error(n.default.ERR0014);if(o){const t=await fetch(o);if(t){if(i=(await t.text()).trim(),!i)throw new Error(n.default.ERR0014)}}return r&&i?r+"\n"+i:r||(i||void 0)}}};